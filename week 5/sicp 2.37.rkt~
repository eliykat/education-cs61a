; SICP 2.37

; copy accumulate function from p 158
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

; accumulate-n from 2.36
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      null
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

; example matrix
(define test-matrix (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))

; example function
(define (dot-product v w)
  (accumulate + 0 (map * v w)))

; TODO
;(define (matrix-*-vector m v)
 ; (map ? m))

(define (transpose mat)
  (accumulate-n cons null mat))

(transpose test-matrix)

;(define (matrix-*-matrix m n)
 ; (let ((cols (transpose n)))
  ;  (map ? m)))

